{"version":3,"sources":["blacking.js"],"names":[],"mappings":"AAAA;;;;;;;;;AAKA,IAAI,WAAW,SAAX,QAAW,CAAS,IAAT,EAAe,IAAf,EAAqB;AAClC,MAAI,QAAQ,2BAAZ;AACA,MAAI,cAAJ;AACA,MAAI,iBAAiB,IAArB;AACA,MAAI,qBAAqB,CAAzB;AACA,MAAI,SAAS,EAAb;;AAEA,SAAO,CAAC,QAAQ,MAAM,IAAN,CAAW,IAAX,CAAT,MAA+B,IAAtC,EAA4C;AAC1C,qBAAiB,KAAjB;;AAEA,QAAI,QAAQ,SAAS,UAAT,CAAoB,MAAM,CAAN,CAApB,CAAZ;AACA,QAAI,UAAU,MAAM,CAAN,CAAd;;AAEA,cAAU,KAAK,SAAL,CAAe,kBAAf,EAAmC,MAAM,KAAzC,CAAV;;AAEA,QAAI,kBAAkB,KAAtB;;AAEA,QAAI,MAAM,OAAN,CAAc,MAAd,IAAwB,MAAM,MAAN,CAAa,MAAzC,EAAiD;AAC/C,UAAI,KAAK,MAAT,EAAiB;AACf,YAAI,MAAM,OAAN,CAAc,IAAd,CAAmB,UAAC,KAAD;AAAA,iBAAW,KAAK,MAAL,CAAY,QAAZ,CAAqB,KAArB,CAAX;AAAA,SAAnB,KAA8D,MAAM,OAAN,CAAc,MAAd,IAAwB,CAA1F,EAA6F;AAC3F,cAAI,MAAM,MAAN,CAAa,IAAb,CAAkB,UAAC,KAAD;AAAA,mBAAW,KAAK,MAAL,CAAY,QAAZ,CAAqB,KAArB,CAAX;AAAA,WAAlB,CAAJ,EAA+D;AAC7D,8BAAkB,IAAlB;AACD;AACF,SAJD,MAIO;AACL,4BAAkB,IAAlB;AACD;AACF,OARD,MAQO;AACL,0BAAkB,IAAlB;AACD;AACF;;AAED,QAAI,eAAJ,EAAqB;AACnB,UAAI,MAAM,iBAAV,EAA6B;AAC3B,kBAAU,QAAQ,OAAR,CAAgB,qBAAhB,EAAuC,MAAM,iBAA7C,CAAV;AACD;AACF,KAJD,MAIO;AACL,gBAAU,OAAV;AACD;;AAED,yBAAqB,MAAM,SAA3B;AACD;;AAED,MAAI,cAAJ,EAAoB;AAClB,WAAO,IAAP;AACD;;AAED,SAAO,MAAP;AACD,CA/CD;;AAiDA,SAAS,UAAT,GAAsB,UAAS,WAAT,EAAsB;AAC1C,MAAI,UAAU;AACZ,aAAS,EADG;AAEZ,YAAQ,EAFI;AAGZ,uBAAmB;AAHP,GAAd;AAKA,cAAY,KAAZ,CAAkB,GAAlB,EAAuB,OAAvB,CAA+B,UAAC,UAAD,EAAgB;AAC7C,YAAQ,WAAW,MAAX,CAAkB,CAAlB,CAAR;AACE,WAAK,GAAL;AACE,gBAAQ,OAAR,CAAgB,IAAhB,CAAqB,WAAW,MAAX,CAAkB,CAAlB,CAArB;AACA;AACF,WAAK,GAAL;AACE,gBAAQ,MAAR,CAAe,IAAf,CAAoB,WAAW,MAAX,CAAkB,CAAlB,CAApB;AACA;AACF,WAAK,GAAL;AACE,YAAI,QAAQ,iBAAR,CAA0B,MAA1B,GAAmC,CAAvC,EAA0C;AACxC,kBAAQ,IAAR,qDAA+D,WAAW,MAAX,CAAkB,CAAlB,CAA/D,sBAAoG,QAAQ,iBAA5G;AACD;AACD,gBAAQ,iBAAR,GAA4B,WAAW,MAAX,CAAkB,CAAlB,CAA5B;AACA;AACF,WAAK,EAAL;;AAEE;AACF;AACE,gBAAQ,IAAR,0CAAqD,UAArD;AAjBJ;AAmBD,GApBD;AAqBA,SAAO,OAAP;AACD,CA5BD;;kBA8Be,Q","file":"blacking-compiled.js","sourcesContent":["\"use strict\";\n\n/**\n * @return {string}\n */\nvar Blacking = function(text, user) {\n  let regex = /\\[([^\\]]*)\\]\\{([^\\}]+)\\}/g;\n  let match;\n  let nothingMatched = true;\n  let endOfPreviousMatch = 0;\n  let result = \"\";\n\n  while ((match = regex.exec(text)) !== null) {\n    nothingMatched = false;\n\n    let rules = Blacking.ruleParser(match[1]);\n    let content = match[2];\n\n    result += text.substring(endOfPreviousMatch, match.index);\n\n    let shouldBeBlacked = false;\n\n    if (rules.allowed.length || rules.denied.length) {\n      if (user.groups) {\n        if (rules.allowed.some((group) => user.groups.includes(group)) || rules.allowed.length == 0) {\n          if (rules.denied.some((group) => user.groups.includes(group))) {\n            shouldBeBlacked = true;\n          }\n        } else {\n          shouldBeBlacked = true;\n        }\n      } else {\n        shouldBeBlacked = true;\n      }\n    }\n\n    if (shouldBeBlacked) {\n      if (rules.blackingCharacter) {\n        result += content.replace(/[^\\s,\\?\\.:!\\-\\(\\)]/g, rules.blackingCharacter);\n      }\n    } else {\n      result += content;\n    }\n\n    endOfPreviousMatch = regex.lastIndex;\n  }\n\n  if (nothingMatched) {\n    return text;\n  }\n\n  return result;\n};\n\nBlacking.ruleParser = function(rulesString) {\n  let results = {\n    allowed: [],\n    denied: [],\n    blackingCharacter: ''\n  };\n  rulesString.split(' ').forEach((ruleString) => {\n    switch (ruleString.charAt(0)) {\n      case '+':\n        results.allowed.push(ruleString.substr(1));\n        break;\n      case '-':\n        results.denied.push(ruleString.substr(1));\n        break;\n      case '=':\n        if (results.blackingCharacter.length > 0) {\n          console.warn(`Duplicate declaration of blacking character: \"${ ruleString.substr(1) }\" replaces \"${ results.blackingCharacter }\"`)\n        }\n        results.blackingCharacter = ruleString.substr(1);\n        break;\n      case '':\n        // allow empty rule sets\n        break;\n      default:\n        console.warn(`Unsupported rule for Privatization: ${ ruleString }`);\n    }\n  });\n  return results;\n};\n\nexport default Blacking;"]}